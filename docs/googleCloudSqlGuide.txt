# Google Cloud SQL Connection Guide

## Quick Reference

### Connection Methods
| Method | Best For | Setup Difficulty | Security |
|--------|----------|------------------|----------|
| Cloud SQL Proxy | Multi-user teams, changing IPs, secure access | Medium | High |
| Direct IP connection | Simple single-user setups, testing | Low | Lower |
| Private IP | Production environments in GCP | High | Highest |

### Cloud SQL Proxy Command
```bash
./cloud-sql-proxy --port 5432 --credentials-file=key.json PROJECT_ID:REGION:INSTANCE_NAME
```

### Connection String Format
```
postgresql://USERNAME:PASSWORD@localhost:5432/DATABASE_NAME
```

### Common Issues and Solutions

| Issue | Solution |
|-------|----------|
| Connection timeout | Check network, firewall settings |
| Authentication error | Verify IAM permissions, refresh credentials |
| Region/zone mismatch | Use only region (us-central1), not zone (us-central1-c) |
| "Address already in use" | Kill existing processes using the port |
| "Not authorized" | Add Cloud SQL Admin role to your account |

---

## Detailed Guide

### 1. Understanding Google Cloud SQL Connection Methods

#### Cloud SQL Proxy
The Cloud SQL Proxy provides a secure way to connect to your Cloud SQL instances without requiring an authorized network or external IP address. The proxy establishes a secure tunnel between your local machine and the Cloud SQL instance.

**Advantages:**
- Works from any network
- No need to manage authorized networks or IP allowlists
- Encrypts connections
- Uses IAM permissions for authentication
- Ideal for development teams with changing IPs or VPNs

**How it works:**
1. The proxy authenticates with Google Cloud using credentials
2. It creates a local server that listens on a port (default: 5432 for PostgreSQL)
3. When your application connects to this local port, the proxy forwards the connection to the Cloud SQL instance
4. The proxy handles encryption and authentication with Google Cloud

#### Direct IP Connection
This method involves connecting directly to the Cloud SQL instance's IP address after adding your IP to the authorized networks.

**Advantages:**
- Simpler setup
- Works with any PostgreSQL client

**Disadvantages:**
- Requires managing authorized networks
- Less secure
- Not suitable for teams with changing IPs

#### Private IP Connection
For applications running in Google Cloud, you can connect using Private IP within the same VPC network.

**Advantages:**
- Most secure option
- No external exposure
- Ideal for production environments

**Disadvantages:**
- Requires VPC network setup
- Only works from resources in the same Google Cloud project or VPC

### 2. Setting Up the Cloud SQL Proxy

#### Installation

**Download the latest version:**
```bash
curl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/latest/cloud-sql-proxy.linux.amd64
chmod +x cloud-sql-proxy
```

#### Authentication Options

**Using Application Default Credentials:**
```bash
gcloud auth application-default login
./cloud-sql-proxy --port 5432 PROJECT_ID:REGION:INSTANCE_NAME
```

**Using a Service Account (recommended for teams):**
```bash
# Create service account
gcloud iam service-accounts create cloud-sql-proxy-sa

# Grant permissions
gcloud projects add-iam-policy-binding PROJECT_ID \
  --member=serviceAccount:cloud-sql-proxy-sa@PROJECT_ID.iam.gserviceaccount.com \
  --role=roles/cloudsql.client

# Create key
gcloud iam service-accounts keys create key.json \
  --iam-account=cloud-sql-proxy-sa@PROJECT_ID.iam.gserviceaccount.com

# Run proxy with key
./cloud-sql-proxy --port 5432 --credentials-file=key.json PROJECT_ID:REGION:INSTANCE_NAME
```

#### Connection String Format

**Important:** The connection string format is:
```
PROJECT_ID:REGION:INSTANCE_NAME
```

Note that you use the **region** (e.g., `us-central1`), not the zone (e.g., `us-central1-c`).

#### Running the Proxy in the Background

```bash
# Background process
./cloud-sql-proxy --port 5432 PROJECT_ID:REGION:INSTANCE_NAME &

# Or using nohup
nohup ./cloud-sql-proxy --port 5432 PROJECT_ID:REGION:INSTANCE_NAME > proxy.log 2>&1 &
```

#### Creating a Systemd Service (for Linux servers)

Create a file at `/etc/systemd/system/cloud-sql-proxy.service`:
```
[Unit]
Description=Cloud SQL Proxy
After=network.target

[Service]
User=your-username
ExecStart=/path/to/cloud-sql-proxy --port 5432 --credentials-file=/path/to/key.json PROJECT_ID:REGION:INSTANCE_NAME
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target
```

Enable and start the service:
```bash
sudo systemctl enable cloud-sql-proxy
sudo systemctl start cloud-sql-proxy
```

### 3. Connecting to Your Database

#### From Python (with psycopg2)

```python
import psycopg2

conn = psycopg2.connect(
    host="localhost",
    port=5432,
    dbname="your-database",
    user="postgres",
    password="your-password"
)
```

#### Using the psql Command Line

```bash
psql -h localhost -p 5432 -U postgres -d your-database
```

#### Connection Pooling (for production)

For production applications, consider using connection pooling:

```python
from psycopg2 import pool

connection_pool = pool.SimpleConnectionPool(
    1,  # minimum connections
    10, # maximum connections
    host="localhost",
    port=5432,
    dbname="your-database",
    user="postgres",
    password="your-password"
)

# Get a connection from the pool
conn = connection_pool.getconn()

# When done, return the connection to the pool
connection_pool.putconn(conn)
```

### 4. Best Practices

1. **Use a service account** instead of personal credentials for production
2. **Create a dedicated service account** for the Cloud SQL Proxy with minimal permissions
3. **Use the Cloud SQL Admin role** for development, but consider more restricted roles for production
4. **Run the proxy as a service** on servers for reliability
5. **Set a custom port** if 5432 conflicts with other services
6. **Configure connection timeouts** in your application
7. **Consider encrypting your credential files** when stored on disk
8. **Rotate service account keys** periodically
9. **Monitor proxy logs** for issues

---

## Troubleshooting Guide

### Connection Refused Errors

**Symptoms:**
```
connection to server at "localhost" (::1), port 5432 failed: Connection refused
```

**Possible causes and solutions:**

1. **Proxy not running**
   - Check if proxy is running: `ps aux | grep cloud-sql-proxy`
   - Start the proxy if not running

2. **Wrong port**
   - Verify the port in your connection string matches the proxy port
   - Check if another process is using the port: `sudo lsof -i :5432`

3. **Localhost resolution issues**
   - Try using 127.0.0.1 instead of localhost

### Authentication Errors

**Symptoms:**
```
failed to connect to instance: failed to get instance: Refresh error: failed to get instance metadata: googleapi: Error 403: Not authorized
```

**Possible causes and solutions:**

1. **Insufficient permissions**
   - Add the Cloud SQL Admin or Cloud SQL Client role:
     ```bash
     gcloud projects add-iam-policy-binding PROJECT_ID \
       --member=user:YOUR_EMAIL \
       --role=roles/cloudsql.admin
     ```

2. **Incorrect or expired credentials**
   - Refresh application default credentials: 
     ```bash
     gcloud auth application-default login
     ```
   - For service accounts, check if the key is valid

3. **Multiple Google accounts causing conflicts**
   - Check active account: `gcloud config get-value account`
   - Set the correct account: `gcloud config set account YOUR_EMAIL`
   - Revoke other accounts if needed: `gcloud auth revoke OTHER_EMAIL`

### Region/Zone Format Errors

**Symptoms:**
```
Config error: provided region was mismatched - got us-central1-c, want us-central1
```

**Solution:**
- Use only the region (e.g., `us-central1`), not the zone (e.g., `us-central1-c`) in the connection string
- Correct format: `PROJECT_ID:REGION:INSTANCE_NAME`

### Port Already in Use

**Symptoms:**
```
could not listen to address 127.0.0.1:5432: listen tcp 127.0.0.1:5432: bind: address already in use
```

**Solutions:**
1. Kill existing proxy processes: `pkill cloud-sql-proxy`
2. Check other processes using the port: `sudo lsof -i :5432`
3. Use a different port: `./cloud-sql-proxy --port 5433 ...`

### Database Not Found

**Symptoms:**
```
database "your-database" does not exist
```

**Solutions:**
1. Verify database name: 
   ```bash
   gcloud sql databases list --instance=INSTANCE_NAME
   ```
2. Create the database if needed:
   ```bash
   gcloud sql databases create DATABASE_NAME --instance=INSTANCE_NAME
   ```

### API Not Enabled

**Symptoms:**
```
API [sqladmin.googleapis.com] not enabled on project
```

**Solution:**
```bash
gcloud services enable sqladmin.googleapis.com
```

### SSL Issues

**Symptoms:**
- "SSL required" errors
- Connection refused with SSL configuration

**Solutions:**
1. Check if SSL is required:
   ```bash
   gcloud sql instances describe INSTANCE_NAME \
     --format="value(settings.ipConfiguration.requireSsl)"
   ```
2. Configure your client to use SSL if required
3. If using the proxy, SSL is handled automatically

### Cloud SQL Instance Not Running

**Symptoms:**
- Timeout errors
- Instance not found errors

**Solution:**
Check instance status:
```bash
gcloud sql instances describe INSTANCE_NAME --format="value(state)"
```

If not RUNNABLE, start it:
```bash
gcloud sql instances patch INSTANCE_NAME --activation-policy=ALWAYS
```

### Proxy Crashes or Unstable

**Symptoms:**
- Proxy stops unexpectedly
- Intermittent connection issues

**Solutions:**
1. Run with verbose logging: `--verbosity=debug`
2. Check memory usage of the proxy process
3. Set up a systemd service to auto-restart the proxy
4. Update to the latest proxy version

### Multiple Google Accounts Confusion

**Symptoms:**
- Authentication works sometimes but not others
- Credentials appear correct but still get 403 errors

**Solutions:**
1. List all authenticated accounts: `gcloud auth list`
2. Check which account is active: `gcloud config get-value account`
3. Set the correct account: `gcloud config set account YOUR_EMAIL`
4. Revoke other accounts if causing confusion: `gcloud auth revoke OTHER_EMAIL`
5. Check application default credentials: `cat ~/.config/gcloud/application_default_credentials.json`
6. Refresh application default credentials: `gcloud auth application-default login`

### Service Account Issues

**Symptoms:**
- Authentication errors with service account
- Key file issues

**Solutions:**
1. Verify the service account exists:
   ```bash
   gcloud iam service-accounts describe SERVICE_ACCOUNT@PROJECT_ID.iam.gserviceaccount.com
   ```
2. Check permissions:
   ```bash
   gcloud projects get-iam-policy PROJECT_ID \
     --format=json | grep -A 10 SERVICE_ACCOUNT
   ```
3. Create a new key if needed:
   ```bash
   gcloud iam service-accounts keys create new-key.json \
     --iam-account=SERVICE_ACCOUNT@PROJECT_ID.iam.gserviceaccount.com
   ```

### Quotas and Limits

**Symptoms:**
- "Quota exceeded" errors
- Connection limits reached

**Solutions:**
1. Check your current quotas in Google Cloud Console
2. Implement connection pooling in your application
3. Close unused connections properly
4. Request quota increases if needed